

private bool MakeSquraeHole(int x, int y)
{
    if (textureWidth != currentTexture.width || textureHeight != currentTexture.height)
    {
        Debug.LogError("texture dimentions are incorrect!");
        textureWidth = currentTexture.width;
        textureHeight = currentTexture.height;
    }
    x = x - halfOfEraseBrushSize;
    y = y - halfOfEraseBrushSize;
    int holeWidth = eraseBrushSize;
    int holeHeight = eraseBrushSize;
    bool solidPixelFound = false;

    // Color[] coloursInTexture = currentTexture.GetPixels(x, y, eraseBrushSize, eraseBrushSize);//TODO: Optimise
    /*for (int i = 0; i < coloursInTexture.Length; i++)
    {
        if( coloursInTexture[i]!= Color.clear)
        {
            emptyPixelFound = true;
             break;
        }
    }*/
    if (x < 0)
    {
        //Debug.Log("x:" + x);
        holeWidth += x;
        // Debug.Log("x:"+x);
        if (holeWidth <= 0)
        {
            return false;
        }
        else
        {
            x = 0;
        }
    }
    else
    {
        int textureWidthMinusHoleX = textureWidth - (x + holeWidth);
        if (textureWidthMinusHoleX < 0)
        {
            holeWidth += textureWidthMinusHoleX;
            if (holeWidth <= 0)
            {
                return false;
            }
        }
    }

    if (y < 0)
    {
        //Debug.Log("x:" + x);
        holeHeight += y;
        // Debug.Log("x:"+x);
        if (holeHeight <= 0)
        {
            return false;
        }
        else
        {
            y = 0;
        }
    }
    else
    {
        int textureHeightMinusHoleY = textureHeight - (y + holeHeight);
        if (textureHeightMinusHoleY < 0)
        {
            holeHeight += textureHeightMinusHoleY;
            if (holeHeight <= 0)
            {
                return false;
            }
        }
    }

    /* for (int ix = x; ix < holeWidth+x; ix++)//TODO: should this be before or after bounds checks?
     {
         for (int iy = y; iy < holeHeight+y; iy++)
         {
             if (currentTexture.GetPixel(ix, iy) != Color.clear)
             {
                 Debug.Log("emptyPixelFound:"+ currentTexture.GetPixel(ix, iy));
                 Debug.Log("x:" + ix+"y:" + iy);
                 Debug.Log("width:" + textureWidth + "height:" + textureHeight);

                 currentTexture.SetPixel(ix, iy, Color.magenta);
                 solidPixelFound = true;
                 return true;
                 break;
             }
         }
     }*/
    // if (solidPixelFound)
    {
        changedSinceLastCheck = true;
        //x = Mathf.Clamp()
        currentTexture.SetPixels
            (x, y, holeWidth, holeHeight, clearColours);

        return true;
    }
    // return solidPixelFound;

}

/*public class ColliderCreator : MonoBehaviour
{
    void Start()
    {
        // Stop if no mesh filter exists or there's already a collider
        if (GetComponent<PolygonCollider2D>() || GetComponent<SpriteRenderer>() == null)
        {
            return;
        }

        // Get triangles and vertices from mesh
        ushort[] triangles = GetComponent<SpriteRenderer>().sprite.triangles;
        Vector2[] vertices = GetComponent<SpriteRenderer>().sprite.vertices;

        // Get just the outer edges from the mesh's triangles (ignore or remove any shared edges)
        Dictionary<string, KeyValuePair<int, int>> edges = new Dictionary<string, KeyValuePair<int, int>>();
        for (int i = 0; i < triangles.Length; i += 3)
        {
            for (int e = 0; e < 3; e++)
            {
                int vert1 = triangles[i + e];
                int vert2 = triangles[i + e + 1 > i + 2 ? i : i + e + 1];
                string edge = Mathf.Min(vert1, vert2) + ":" + Mathf.Max(vert1, vert2);
                if (edges.ContainsKey(edge))
                {
                    edges.Remove(edge);
                }
                else
                {
                    edges.Add(edge, new KeyValuePair<int, int>(vert1, vert2));
                }
            }
        }

        // Create edge lookup (Key is first vertex, Value is second vertex, of each edge)
        Dictionary<int, int> lookup = new Dictionary<int, int>();
        foreach (KeyValuePair<int, int> edge in edges.Values)
        {
            if (lookup.ContainsKey(edge.Key) == false)
            {
                lookup.Add(edge.Key, edge.Value);
            }
        }

        // Create empty polygon collider
        PolygonCollider2D polygonCollider = gameObject.AddComponent<PolygonCollider2D>();
        polygonCollider.pathCount = 0;

        // Loop through edge vertices in order
        int startVert = 0;
        int nextVert = startVert;
        int highestVert = startVert;
        List<Vector2> colliderPath = new List<Vector2>();
        while (true)
        {

            // Add vertex to collider path
            colliderPath.Add(vertices[nextVert]);

            // Get next vertex
            nextVert = lookup[nextVert];

            // Store highest vertex (to know what shape to move to next)
            if (nextVert > highestVert)
            {
                highestVert = nextVert;
            }

            // Shape complete
            if (nextVert == startVert)
            {

                // Add path to polygon collider
                polygonCollider.pathCount++;
                polygonCollider.SetPath(polygonCollider.pathCount - 1, colliderPath.ToArray());
                colliderPath.Clear();

                // Go to next shape if one exists
                if (lookup.ContainsKey(highestVert + 1))
                {

                    // Set starting and next vertices
                    startVert = highestVert + 1;
                    nextVert = startVert;

                    // Continue to next loop
                    continue;
                }

                // No more verts
                break;
            }
        }
    }
}
*/